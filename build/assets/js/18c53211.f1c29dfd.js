"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8129],{3442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"blind-75/Reorder Data In Log Files","title":"Reorder Data In Log Files","description":"Problem Link https://leetcode.com/problems/reorder-data-in-log-files/.","source":"@site/docs/blind-75/Reorder Data In Log Files.md","sourceDirName":"blind-75","slug":"/blind-75/Reorder Data In Log Files","permalink":"/docs/blind-75/Reorder Data In Log Files","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/blind-75/Reorder Data In Log Files.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Min Stack","permalink":"/docs/blind-75/Min Stack"},"next":{"title":"Search Suggestions System","permalink":"/docs/blind-75/Search Suggestions System"}}');var i=n(4848),r=n(8453);const s={sidebar_position:2},l="Reorder Data In Log Files",a={},d=[{value:"Approch and Code",id:"approch-and-code",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"reorder-data-in-log-files",children:"Reorder Data In Log Files"})}),"\n",(0,i.jsxs)(t.p,{children:["Problem Link ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/reorder-data-in-log-files/",children:"https://leetcode.com/problems/reorder-data-in-log-files/"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"approch-and-code",children:"Approch and Code"}),"\n",(0,i.jsxs)(t.p,{children:["Please look at the ",(0,i.jsx)(t.strong,{children:"approach"})," and the ",(0,i.jsx)(t.code,{children:"solution"})," below."]}),"\n",(0,i.jsx)(t.p,{children:"Add metadata to customize the sidebar label and position:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-md",metastring:'title="memo" {1-4}',children:'---\nApproach and Insight\nProblem: Reorder Data in Log Files\nObjective: Reorder a list of log files so that:\nLetter-logs come before digit-logs.\nLetter-logs are ordered lexicographically by content, and in case of ties, by identifier.\nDigit-logs remain in their original relative order.\nInsight\nClassification of Logs:\n\nLogs are classified as:\nLetter-logs: If the content (after the first space) consists of letters.\nDigit-logs: If the content consists of numbers.\nExample:\nbash\nCopy code\n"dig1 8 1 5 1" \u2192 Digit-log\n"let1 art can" \u2192 Letter-log\nCustom Sorting:\n\nFor Letter-logs:\nSort by the content (lexicographically).\nIf the content is identical, sort by the identifier.\nFor Digit-logs:\nPreserve their original order (stable sorting).\n\nApproach\nSeparate Logs:\n\nIterate through the logs and classify them as Letter-logs or Digit-logs.\nSort Letter-logs:\n\nUse a custom sorting function:\nPrimary key: Log content.\nSecondary key: Log identifier.\nCombine Results:\n\nAppend the sorted Letter-logs followed by the Digit-logs.\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",metastring:'title="Solution.py"',children:"class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        letter_logs = []\n        digit_logs = []\n\n        for let in logs:\n            if let[-1].isdigit():\n                digit_logs.append(let)\n            else:\n                letter_logs.append(let)\n        #sort the letter logs alphabetically\n        letter_logs.sort(key = lambda x: (x.split()[1:] ,x.split()[0]))\n        result = []\n        result = letter_logs + digit_logs \n        return result \n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-md",metastring:'title="Rundown"',children:'isual Explanation\nExample Input\nInput:\n\ncss\nCopy code\nlogs = ["dig1 8 1 5 1", "let1 art can", "dig2 3 6", "let2 own kit dig", "let3 art zero"]\nExecution\nSeparate Logs:\n\nLetter-logs: ["let1 art can", "let2 own kit dig", "let3 art zero"]\nDigit-logs: ["dig1 8 1 5 1", "dig2 3 6"]\nSort Letter-logs:\n\nExtract content and identifier:\narduino\nCopy code\n"let1 art can" \u2192 Content: "art can", Identifier: "let1"\n"let2 own kit dig" \u2192 Content: "own kit dig", Identifier: "let2"\n"let3 art zero" \u2192 Content: "art zero", Identifier: "let3"\nSort by content, then identifier:\nSorted: ["let1 art can", "let3 art zero", "let2 own kit dig"]\nCombine Results:\n\nAppend the sorted Letter-logs followed by the original Digit-logs:\ncss\nCopy code\n["let1 art can", "let3 art zero", "let2 own kit dig", "dig1 8 1 5 1", "dig2 3 6"]\nResult\nOutput:\n\ncss\nCopy code\n["let1 art can", "let3 art zero", "let2 own kit dig", "dig1 8 1 5 1", "dig2 3 6"]\nComplexity Analysis\nTime Complexity\nSeparation: \n\nO(N), where \nN is the number of logs.\nSorting Letter-logs:\nCustom sorting involves comparing log content and identifiers.\nSorting complexity: \n\nO(MlogM), where M is the number of letter-logs.\nCombining Results: \n\nO(N).\nTotal Complexity: \n\nO(MlogM+N).\n\nSpace Complexity\n\nO(M+D) for storing the separated Letter-logs and Digit-logs, where \n\ud835\udc40\nM and \n\ud835\udc37\nD are their respective counts.\nEdge Cases\nAll Letter-logs:\n\nInput: ["let1 abc", "let2 def"]\nOutput: ["let1 abc", "let2 def"] (sorted lexicographically).\nAll Digit-logs:\n\nInput: ["dig1 1 2 3", "dig2 3 4 5"]\nOutput: ["dig1 1 2 3", "dig2 3 4 5"] (original order).\nMixed Logs with Identical Contents:\n\nInput: ["let1 abc", "let2 abc", "dig1 1 2 3"]\nOutput: ["let1 abc", "let2 abc", "dig1 1 2 3"] (sorted by identifier for ties).\n'})})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var o=n(6540);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5],{9144:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"blind-75/course-schedule-II","title":"Course Schedule II","description":"Problem Link https://leetcode.com/problems/course-schedule-ii/.","source":"@site/docs/blind-75/course-schedule-II.md","sourceDirName":"blind-75","slug":"/blind-75/course-schedule-II","permalink":"/docs/blind-75/course-schedule-II","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/blind-75/course-schedule-II.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Word Search","permalink":"/docs/blind-75/Word Search"},"next":{"title":"Two Sum","permalink":"/docs/blind-75/create-a-document"}}');var t=r(4848),o=r(8453);const i={sidebar_position:2},a="Course Schedule II",d={},c=[{value:"Approch and Code",id:"approch-and-code",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"course-schedule-ii",children:"Course Schedule II"})}),"\n",(0,t.jsxs)(n.p,{children:["Problem Link ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/course-schedule-ii/",children:"https://leetcode.com/problems/course-schedule-ii/"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"approch-and-code",children:"Approch and Code"}),"\n",(0,t.jsxs)(n.p,{children:["Please look at the ",(0,t.jsx)(n.strong,{children:"approach"})," and the ",(0,t.jsx)(n.code,{children:"solution"})," below."]}),"\n",(0,t.jsx)(n.p,{children:"Add metadata to customize the sidebar label and position:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",metastring:'title="memo" {1-4}',children:'---\nCourse Schedule II\nInsight: Perform topological sorting with a DFS to detect cycles and determine order.\n\nApproach:\n\nBuild a graph with courses as nodes and prerequisites as edges.\nUse a DFS function to check for cycles:\nMark nodes as "visiting" during traversal.\nIf a cycle is detected, return false.\nCollect nodes in topological order.\nTime Complexity: \n\nO(V+E)\n\n\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",metastring:'title="Solution.py"',children:"class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        order = []\n        g = defaultdict(list)\n\n        #make the graph\n        for a,b in prerequisites:\n            g[a].append(b)\n        \n        UNVISITED, VISITING, VISITED = 0, 1, 2\n        states = [UNVISITED] * numCourses\n        def dfs(i):\n            #Base cases :\n            if states[i] == VISITING:\n                return False\n            elif states[i] == VISITED:\n                return True\n            states[i] = VISITING\n            \n            #now visit all the neighbours\n            for neigbours in g[i]:\n                if not dfs(neigbours):\n                    return False\n\n            #Didn't return true that means we found courses to return \n            states[i] = VISITED\n            order.append(i)\n            return True\n\n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        \n        return order\n\n\n\n        \n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",metastring:'title="Rundown"',children:"Execution Trace Example\nInput:\nCourses: 4, Prerequisites: [[1, 0], [2, 1], [3, 2]]\nProcess:\nBuild Graph:\n\n0: [1]\n1: [2]\n2: [3]\nDFS Traversal:\n\nStart with course 0:\nMark 0 as visiting. Explore 1.\nMark 1 as visiting. Explore 2.\nMark 2 as visiting. Explore 3.\nMark 3 as visited. Add to order: [3].\nBacktrack: Mark 2 as visited. Add to order: [3, 2].\nBacktrack: Mark 1 as visited. Add to order: [3, 2, 1].\nBacktrack: Mark 0 as visited. Add to order: [3, 2, 1, 0].\nResult:\nTopological order: [0, 1, 2, 3]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
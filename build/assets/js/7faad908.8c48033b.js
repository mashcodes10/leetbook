"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2887],{8200:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"blind-75/Valid Suduko","title":"Valid Suduko","description":"Problem Link https://leetcode.com/problems/valid-sudoku/description/.","source":"@site/docs/blind-75/Valid Suduko.md","sourceDirName":"blind-75","slug":"/blind-75/Valid Suduko","permalink":"/docs/blind-75/Valid Suduko","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/blind-75/Valid Suduko.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Time Based Key and Value Store","permalink":"/docs/blind-75/Time Based Key and Value Store"},"next":{"title":"Word Ladder","permalink":"/docs/blind-75/Word Ladder"}}');var a=o(4848),i=o(8453);const r={sidebar_position:2},s="Valid Suduko",d={},l=[{value:"Approch and Code",id:"approch-and-code",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"valid-suduko",children:"Valid Suduko"})}),"\n",(0,a.jsxs)(e.p,{children:["Problem Link ",(0,a.jsx)(e.a,{href:"https://leetcode.com/problems/valid-sudoku/description/",children:"https://leetcode.com/problems/valid-sudoku/description/"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"approch-and-code",children:"Approch and Code"}),"\n",(0,a.jsxs)(e.p,{children:["Please look at the ",(0,a.jsx)(e.strong,{children:"approach"})," and the ",(0,a.jsx)(e.code,{children:"solution"})," below."]}),"\n",(0,a.jsx)(e.p,{children:"Add metadata to customize the sidebar label and position:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-md",metastring:'title="memo" {1-4}',children:'---\nProblem: Valid Sudoku\nFrom Your File:\nRows Validation: For each row, use a set to track numbers.\nIf a number is already in the set and is not ".", the board is invalid.\nColumns Validation: For each column, use a set to track numbers.\nApply the same logic as rows.\nBoxes Validation: Predefine the starting indices for each 3x3 sub-grid.\nFor each box, use a set to check uniqueness.\nPredefined Box Indices:\ncss\nCopy code\nboxes = [(0, 3), (0, 6), (0, 9),          (3, 3), (3, 6), (3, 9),         (6, 3), (6, 6), (6, 9)]\nApproach\nRow Validation:\n\nLoop through each row (0-8).\nCreate a set to track numbers.\nFor each number:\nIf it\u2019s already in the set and not ".", return False.\nOtherwise, add it to the set.\nColumn Validation:\n\nLoop through each column (0-8).\nApply the same logic as rows.\nBox Validation:\n\nUse the predefined boxes indices.\nFor each box:\nCreate a set to track numbers.\nLoop through the rows and columns inside the box:\nIf a number repeats, return False.\nReturn True:\n\nIf all validations pass, the board is valid.\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",metastring:'title="Solution.py"',children:"class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        for i in range(9):\n            s= set()\n            for j in range(9):\n                item = board [i][j]\n                if item in s:\n                    return False\n                elif item != '.':\n                    s.add(item)\n        \n        for i in range(9):\n            s= set()\n            for j in range(9):\n                item = board [j][i]\n                if item in s:\n                    return False\n                elif item != '.':\n                    s.add(item)\n        \n        # start = [(0,0),(0,3),(0,6),(3,0),(3,3),(3,6),(6,0),(6,3),(6,6) ]\n\n        # for i,j in start:\n        #     s = set()\n        #     for row in range (i,i+3):\n        #         for col in range (j,j+3):\n        #             item = board [row][col]\n        #             if item in s:\n        #                 return False\n        #             elif item != '.':\n        #                 s.add(item)\n\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n\n                s = set()\n\n                for k in range(i, i + 3):\n                    for l in range(j, j + 3):\n                        if board[k][l] != \".\":\n                            if board[k][l] not in s:\n                                s.add(board[k][l])\n                            else:\n                                return False\n        return True\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-md",metastring:'title="Rundown"',children:'Execution Example\nInput Board:\ncss\nCopy code\n[ ["5","3",".",".","7",".",".",".","."],\n ["6",".",".","1","9","5",".",".","."],\n [".","9","8",".",".",".",".","6","."],\n ["8",".",".",".","6",".",".",".","3"],\n ["4",".",".","8",".","3",".",".","1"],\n ["7",".",".",".","2",".",".",".","6"],\n [".","6",".",".",".",".","2","8","."],\n [".",".",".","4","1","9",".",".","5"],\n [".",".",".",".","8",".",".","7","9"]\n]\nRow Validation:\n\nFor row 0: Validate {"5", "3", "7"} \u2192 Valid.\nRepeat for all rows.\nColumn Validation:\n\nFor column 0: Validate {"5", "6", "8", "4", "7"} \u2192 Valid.\nRepeat for all columns.\nBox Validation:\n\nFor box (0, 0) (rows 0-2, columns 0-2): Validate {"5", "3", "6", "9", "8"} \u2192 Valid.\nRepeat for all predefined boxes.\nFinal Check:\n\nAll validations pass. Return True.\nResult\nOutput: True\n\nComplexity Analysis\nTime Complexity\nRows and Columns Validation: \n\nO(9 \n2\n ), constant for a 9x9 grid.\nBox Validation: \n\nO(9\xd79), constant for a 9x9 grid.\nTotal Complexity: \n\nO(1).\n\nSpace Complexity\nO(9) for rows, columns, and box sets.\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>r,x:()=>s});var t=o(6540);const a={},i=t.createContext(a);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);